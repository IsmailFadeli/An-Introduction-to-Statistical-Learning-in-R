rename(flights, tail_num = tailnum)
select(flights, time_hour, air_time, everything())
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, dep_time, dep_delay, -(everything()))
select(flights, dep_time, dep_delay, -(everything(dep_time)))
select(flights, dep_time, dep_delay, dep_delay)
vars
var
var <- c(
"years", "months", "days", "hours"
)
var <- c(
"years", "months", "days", "hours"
)
vars
var <- c(
"years", "months", "days", "hours"
)
one_of(var)
one_of(years)
one_of("years)
one_of("years")
one_of(c("years", "months"))
select(var, "years")
select(var, years)
select(one_of(var))
select(flights, contains("TIME"))
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(nycflights13)
library(tidyverse)
flights
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(nycflights13)
flights_small <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
View(flights_small)
mutate(flights_small,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
Sales <- read_csv("D:/USPOLOASSN/Sales/SALES.csv")
Sales
Close(Sales)
Sales <- read_csv("D:/USPOLOASSN/Sales/SALESS.csv")
Sales
ggplot(data = Sales) +
geom_bar(mapping = aes(x = "Category", y = "Quantity"))
ggplot(data = Sales) +
geom_bar(mapping = aes(x = Category, y = Quantity))
ggplot(data = Sales)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = Sales) +
geom_bar(mapping = aes(x = Category))
Sales <- read_csv("D:/USPOLOASSN/Sales/SALESSS.csv")
Sales
ggplot(data = Sales) +
geom_bar(mapping = aes(x = Category))
ggplot(data = Sales) +
geom_bar(mapping = aes(x = R))
sales_par_category <- read_csv("D:/USPOLOASSN/Sales/Sales_by_category.csv")
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category))
sales_par_category <- read_csv("D:/USPOLOASSN/Sales/Sales_by_cat.csv")
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category))
select(sales_par_category, "Category")
mutate(sales_par_category, "NEW")
sales_par_category
ggplot(sales_par_category) +
geom_histogram(mapping = aes(x = Category))
geom_histogram(mapping = aes(x = stat(count(Category)))
geom_histogram(mapping = aes(x = count(Category))
count(sales_par_category)
count(Category)
count(sales_par_category(sales_par_category))
stat_summary(sales_par_category)
stat_summary(mapping = aes(x = Category, y = Quantity))
count(Quantity)
sales_par_category %>%
count(Category)
gather(sales_par_category,Category)
gather(sales_par_category,Quantity)
gather(sales_par_category, Category, Quantity)
pivot_longer(sales_par_category, names_to = "Category", values_to = "Quantity")
pivot_longer(!sales_par_category, names_to = "Category", values_to = "Quantity")
pivot_longer(sales_par_category, names_to = "Category", values_to = "Quantity")
summarise(sales_par_category)
sales_par_category
sales_par_category %>%
group_by(Category) %>%
count()
S <= sales_par_category %>%
group_by(Category) %>%
count()
SA<= sales_par_category %>%
group_by(Category) %>%
count()
sales_par_category %>%
group_by(Category) %>%
count()
ggplot((sales_par_category %>%
group_by(Category) %>%
count())) +
geom_bar(x = Category)
ggplot((sales_par_category %>%
group_by(Category) %>%
count())) +
geom_bar(x = n)
problems(sales_par_category)
library(data.table)
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
bar + coord_flip()
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
coord_flip()
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
coord_flip() +
coord_polar()
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
coord_flip() +
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
coord_flip() +
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category)) +
coord_flip()
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category, fill = quantity)) +
coord_flip()
ggplot(data = sales_par_category) +
geom_bar(mapping = aes(x = Category, fill = Category)) +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
## app.R ##
library(shiny)
library(shinydashboard)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Basic Dashboard")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Visit-us", icon = icon("send",lib='glyphicon'),
href = "https://www.salesforce.com")
)
)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Basic Dashboard")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Visit-us", icon = icon("send",lib='glyphicon'),
href = "https://www.salesforce.com")
)
)
shinyApp(ui, server)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Basic Dashboard")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Visit-us", icon = icon("send",lib='glyphicon'),
href = "https://www.salesforce.com")
)
)
shinyApp(ui, server)
shinyApp(ui, server)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "Revenue per Account"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyPrd", height = "300px")
)
,box(
title = "Revenue per Product"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyRegion", height = "300px")
)
)
# combine the two fluid rows to make the body
body <- dashboardBody(frow1, frow2)
#completing the ui part with dashboardPage
ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, format="d", big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue, format="d", big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value, format="d", big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
#run/call the shiny app
shinyApp(ui, server)
#run/call the shiny app
shinyApp(ui, server)
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, format="d", big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue, format="d", big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value, format="d", big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
#run/call the shiny app
shinyApp(ui, server)
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, format="d", big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue, format="d", big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value, format="d", big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
#run/call the shiny app
shinyApp(ui, server)
runApp('D:/R/Shinydashboard/Shiny')
runApp('D:/R/Shinydashboard/Shiny')
knitr::opts_chunk$set(echo = TRUE)
recommendation <- read.csv('recommendation.csv',stringsAsFactors = F,header=T)
head(recommendation)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Basic Dashboard")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Visit-us", icon = icon("send",lib='glyphicon'),
href = "https://www.salesforce.com")
)
)
shinyApp(ui, server)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "Revenue per Account"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyPrd", height = "300px")
)
,box(
title = "Revenue per Product"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("revenuebyRegion", height = "300px")
)
)
# combine the two fluid rows to make the body
body <- dashboardBody(frow1, frow2)
#completing the ui part with dashboardPage
ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')
# create the server functions for the dashboard
server <- function(input, output) {
#some data manipulation to derive the values of KPI boxes
total.revenue <- sum(recommendation$Revenue)
sales.account <- recommendation %>% group_by(Account) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
prof.prod <- recommendation %>% group_by(Product) %>% summarise(value = sum(Revenue)) %>% filter(value==max(value))
#creating the valueBoxOutput content
output$value1 <- renderValueBox({
valueBox(
formatC(sales.account$value, format="d", big.mark=',')
,paste('Top Account:',sales.account$Account)
,icon = icon("stats",lib='glyphicon')
,color = "purple")
})
output$value2 <- renderValueBox({
valueBox(
formatC(total.revenue, format="d", big.mark=',')
,'Total Expected Revenue'
,icon = icon("gbp",lib='glyphicon')
,color = "green")
})
output$value3 <- renderValueBox({
valueBox(
formatC(prof.prod$value, format="d", big.mark=',')
,paste('Top Product:',prof.prod$Product)
,icon = icon("menu-hamburger",lib='glyphicon')
,color = "yellow")
})
#creating the plotOutput content
output$revenuebyPrd <- renderPlot({
ggplot(data = recommendation,
aes(x=Product, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Product") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Product") + labs(fill = "Region")
})
output$revenuebyRegion <- renderPlot({
ggplot(data = recommendation,
aes(x=Account, y=Revenue, fill=factor(Region))) +
geom_bar(position = "dodge", stat = "identity") + ylab("Revenue (in Euros)") +
xlab("Account") + theme(legend.position="bottom"
,plot.title = element_text(size=15, face="bold")) +
ggtitle("Revenue by Region") + labs(fill = "Region")
})
}
#run/call the shiny app
shinyApp(ui, server)
#run/call the shiny app
shinyApp(ui, server)
#run/call the shiny app
shinyApp(ui, server)
shinyApp(ui, server)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
#Dashboard header carrying the title of the dashboard
header <- dashboardHeader(title = "Basic Dashboard")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Visit-us", icon = icon("send",lib='glyphicon'),
href = "https://www.salesforce.com")
)
)
shinyApp(ui, server)
runApp('D:/R/Shinydashboard/Shiny')
runApp('D:/Essential softwares/sample_revenue_dashboard_shiny-master')
runApp('D:/Essential softwares/sample_revenue_dashboard_shiny-master')
runApp('D:/R/Shinydashboard/Sales')
