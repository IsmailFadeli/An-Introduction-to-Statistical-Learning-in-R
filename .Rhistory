EX01
absor = function (M){
library(markovchain)
MC = new ("markovchain", transitionMatrix = M)
b=c()
b= absorbingStates(MC)
TS=c()
TS = transientStates(MC)
if( length(b)  == 0){
return( "la chaine n'est pas absorbante")
}
else{
n = nrow(M)
m = n- length(b)
FF = matrix(nrow= m, ncol = length(b))
for(i in 1:m){
for(j in 1:length(b)){
FF[i,j]= is.accessible(MC,TS[i],b[j])
}
}
}
k=0
for(i in 1:m){
for(j in 1:length(b)){
if  (FF[i,j] == TRUE)
k=k+1
}
}
if  (k<((length(b))*m)) {
return("la chaine n'est pas absorbante") }
else  return ("la chain est absorbante")
}
/////////////////////////////////////////////////////////////EXemple
v=c(1/3,1/3,0,0,1/3,1/3,0,2/3,0,0,0,1/3,0,2/3,0,0,0,1/3,0,2/3,1,0,0,0,0)
pr=matrix(v,5,5,byrow=T)
absor(pr)
v=c(1,0,0,0,0,0.5,0,0.5,0,0,0,0,0.5,0.5,0,0,0,0.5,0,0.5,0,0,0,0,1)
pr=matrix(v,5,5,byrow=T)
absor(pr)
k=c(0.5,0.3,0,0.2,0.4,0.1,0.5,0,0.1,0,0.4,0.5,0,0,0,1)
pr=matrix(k,4,4,byrow=T)
absor(pr)
absor = function (M){
library(markovchain)
MC = new ("markovchain", transitionMatrix = M)
b=c()
b= absorbingStates(MC)
TS=c()
TS = transientStates(MC)
if( length(b)  == 0){
return( "la chaine n'est pas absorbante")
}
else{
n = nrow(M)
m = n- length(b)
FF = matrix(nrow= m, ncol = length(b))
for(i in 1:m){
for(j in 1:length(b)){
FF[i,j]= is.accessible(MC,TS[i],b[j])
}
}
}
k=0
for(i in 1:m){
for(j in 1:length(b)){
if  (FF[i,j] == TRUE)
k=k+1
}
}
if  (k<((length(b))*m)) {
return("la chaine n'est pas absorbante") }
else  return ("la chain est absorbante")
}
install.packages("yaml")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("survnnet")
install.packages("swirl")
# Get the cumulative sum of the products sales' percentages
cumulative <- cumsum(inventory$percentage)
# Add the cumulative column to inventory data frame
inventory <- mutate(inventory, cumulative)
# Set items' SKUs
SKU <- c(1:50)
# Set items' demands
demand <- ceiling(runif(50, 0, 100))
# Set items' prices
price <- ceiling(runif(50, 1, 100))
# Get items' sales
sales <- demand * price
# Construct inventory data frame
inventory <- data.frame(SKU, sales)
# Sort sales column in descending order
inventory <- inventory[order(-inventory$sales), ]
# Get the total sales
total_sales <- sum(inventory$sales)
# Create an empty vector for sales percentages
percentage <- c()
# Get the sales percentage for each item
for (i in inventory$sales){
percentage <- append(percentage, i/total_sales * 100)
}
# Import dplyr package
library(dplyr)
# Add the percentage column to inventory data frame
inventory <- mutate(inventory, percentage)
# Get the cumulative sum of the products sales' percentages
cumulative <- cumsum(inventory$percentage)
# Add the cumulative column to inventory data frame
inventory <- mutate(inventory, cumulative)
# Create an empty vector for items classification
classification <- c()
# Classify the items by A, B and C
for (i in inventory$cumulative){
if (i < 70) {
classification <- append(classification, "A")
} else if (i >= 70 & i < 90) {
classification <- append(classification, "B")
} else {
classification <- append(classification, "C")
}
}
# Add the classification column to inventory data frame
inventory <- mutate(inventory, classification)
summary
# Import ggplot2 package
library(ggplot2)
# Build inventory classification graph
ggplot(data = inventory, aes(x = classification)) +
geom_bar(aes(fill = classification)) +
labs(title = "Inventory ABC Distribution",
subtitle = "Inventory Planning and Managing",
x = "Items Classification",
y = "Count")
# Print results
summary <- count(inventory, classification)
summary$percentage <- summary$n / sum(summary$n) * 100
summary
q()
EX01
absor = function (M){
library(markovchain)
MC = new ("markovchain", transitionMatrix = M)
b=c()
b= absorbingStates(MC)
TS=c()
TS = transientStates(MC)
if( length(b)  == 0){
return( "la chaine n'est pas absorbante")
}
else{
n = nrow(M)
m = n- length(b)
FF = matrix(nrow= m, ncol = length(b))
for(i in 1:m){
for(j in 1:length(b)){
FF[i,j]= is.accessible(MC,TS[i],b[j])
}
}
}
k=0
for(i in 1:m){
for(j in 1:length(b)){
if  (FF[i,j] == TRUE)
k=k+1
}
}
if  (k<((length(b))*m)) {
return("la chaine n'est pas absorbante") }
else  return ("la chain est absorbante")
}
v=c(1/3,1/3,0,0,1/3,1/3,0,2/3,0,0,0,1/3,0,2/3,0,0,0,1/3,0,2/3,1,0,0,0,0)
pr=matrix(v,5,5,byrow=T)
absor(pr)
v=c(1,0,0,0,0,0.5,0,0.5,0,0,0,0,0.5,0.5,0,0,0,0.5,0,0.5,0,0,0,0,1)
pr=matrix(v,5,5,byrow=T)
absor(pr)
k=c(0.5,0.3,0,0.2,0.4,0.1,0.5,0,0.1,0,0.4,0.5,0,0,0,1)
pr=matrix(k,4,4,byrow=T)
absor(pr)
Install package 'markovchain'
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallLocal()
utils:::menuInstallPkgs()
q()
# Set items' SKUs
SKU <- c(1:50)
# Set items' demands
demand <- ceiling(runif(50, 0, 100))
# Set items' prices
price <- ceiling(runif(50, 1, 100))
# Get items' sales
sales <- demand * price
# Construct inventory data frame
inventory <- data.frame(SKU, sales)
# Sort sales column in descending order
inventory <- inventory[order(-inventory$sales), ]
# Get the total sales
total_sales <- sum(inventory$sales)
# Create an empty vector for sales percentages
percentage <- c()
# Get the sales percentage for each item
for (i in inventory$sales){
percentage <- append(percentage, i/total_sales * 100)
}
# Import dplyr package
library(dplyr)
# Add the percentage column to inventory data frame
inventory <- mutate(inventory, percentage)
# Get the cumulative sum of the products sales' percentages
cumulative <- cumsum(inventory$percentage)
# Add the cumulative column to inventory data frame
inventory <- mutate(inventory, cumulative)
# Create an empty vector for items classification
classification <- c()
# Classify the items by A, B and C
for (i in inventory$cumulative){
if (i < 70) {
classification <- append(classification, "A")
} else if (i >= 70 & i < 90) {
classification <- append(classification, "B")
} else {
classification <- append(classification, "C")
}
}
# Add the classification column to inventory data frame
inventory <- mutate(inventory, classification)
View(inventory)
setwd("D:/R")
install.packages("tidyverse")
install.packages("tidyverse")
